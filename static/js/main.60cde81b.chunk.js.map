{"version":3,"sources":["Game.js","registerServiceWorker.js","index.js","assets/twitter.png"],"names":["COLORARR","SOUNDS","Audio","_i","length","load","MESSAGE","gameOver","wrong","correct","won","Button","props","react_default","a","createElement","className","style","backgroundColor","color","onMouseDown","disabled","clickable","id","index","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lightUp","colors","state","sequence","count","interval","setInterval","colorIndex","indexOf","playSoundAtIndex","button","document","getElementById","classList","add","setTimeout","remove","clearInterval","setState","intervalKey","startGame","addNewColor","gameStarted","gameMessage","endGame","push","Math","floor","random","timeOutKey","buttonClickable","clearTimeout","sequenceLength","stepCount","isStrict","toggleStrict","prevState","restartSequence","shareTwitter","message","encodeURIComponent","concat","highScore","window","open","handleColorMouseDown","newStepCount","previousHighScore","currentScore","_this2","buttons","map","buttonColor","Game_Button","key","onClick","opacity","src","twitterLogo","alt","Component","play","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_Game_0","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.60cde81b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport twitterLogo from './assets/twitter.png';\nimport './Game.css';\n\nconst GREEN = '#7cbb00';\nconst RED = '#f65314';\nconst YELLOW = '#ffbb00';\nconst BLUE = '#00a1f1';\nconst COLORARR = [GREEN, RED, YELLOW, BLUE];\nconst SOUND1 = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound1.mp3');\nconst SOUND2 = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3');\nconst SOUND3 = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound3.mp3');\nconst SOUND4 = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound4.mp3');\nconst SOUNDS = [SOUND1, SOUND2, SOUND3, SOUND4];\n// load audio\nfor (let sound of SOUNDS) {\n\tsound.load();\n}\nconst MESSAGE = {\n\t'gameOver': 'Game Over',\n\t'wrong': 'Oops.',\n\t'correct': 'Correct!',\n\t'won': 'You\\' beaten the game!'\n};\n\nconst Button = props => {\n\treturn (\n\t\t<button\n\t\t\tclassName={props.className}\n\t\t\tstyle={{ backgroundColor: props.color, color: 'white' }}\n\t\t\tonMouseDown={props.onMouseDown}\n\t\t\tdisabled={!props.clickable}\n\t\t\tid={props.index}\n\t\t/>\n\t);\n};\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolors: COLORARR,\n\t\t\tsequence: [],\n\t\t\tstepCount: 0,\n\t\t\tbuttonClickable: false,\n\t\t\tintervalKey: null,\n\t\t\tgameStarted: false,\n\t\t\thighScore: 0,\n\t\t\tisStrict: false,\n\t\t\tgameMessage: '',\n\t\t\ttimeOutKey: null\n\t\t};\n\t}\n\n\t// present user with random button presses\n\tlightUp = () => {\n\t\tconst colors = this.state.colors;\n\t\tlet sequence = this.state.sequence;\n\t\tlet count = 0;\n\n\t\tconst interval = setInterval(() => {\n\t\t\tlet colorIndex = colors.indexOf(sequence[count]);\n\t\t\t// play sound\n\t\t\tplaySoundAtIndex(colorIndex);\n\t\t\t// retrieve button to add 'lightup' class\n\t\t\tlet button = document.getElementById(colorIndex);\n\t\t\tbutton.classList.add('lightup');\n\t\t\t// wait 800ms to remove 'lightup' class\n\t\t\tsetTimeout(() => {\n\t\t\t\tbutton.classList.remove('lightup');\n\t\t\t}, 800);\n\t\t\tcount += 1;\n\t\t\tif (count >= sequence.length) {\n\t\t\t\t// clears lightup interval once all lights in sequence are done\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t}, 1200);\n\t\t// set intervalKey for clearing setInterval when click wrong button\n\t\tthis.setState({\n\t\t\tintervalKey: interval\n\t\t});\n\t};\n\n\t// when click 'start' button, display sequence & set button to clickable once finished\n\tstartGame = addNewColor => {\n\t\tthis.setState({\n\t\t\tgameStarted: true,\n\t\t\tgameMessage: '',\n\t\t});\n\t\t// if clicked correct AND we're at length 20, don't add new color, instead game won\n\t\tif (addNewColor && this.state.sequence.length >= 20) {\n\t\t\tthis.endGame();\n\t\t\treturn;\n\t\t} else if (addNewColor) {\n\t\t\tconst sequence = this.state.sequence;\n\t\t\tsequence.push(generateNextColor(COLORARR));\n\t\t\t// at beginning of each round, push one random color to sequence\n\t\t\tthis.setState({\n\t\t\t\tsequence,\n\t\t\t});\n\t\t}\n\n\t\t// play sequence\n\t\tthis.lightUp();\n\t\t// wait until lightup finished then make button clickable\n\t\tconst timeOutKey = setTimeout(() => {\n\t\t\tthis.setState({\n\t\t\t\tbuttonClickable: true\n\t\t\t});\n\t\t}, 1200 * this.state.sequence.length + 500);\n\t\tthis.setState({ timeOutKey })\n\t\treturn;\n\t};\n\n\t// ending game\n\tendGame = () => {\n\t\tclearInterval(this.state.intervalKey);\n\t\tclearTimeout(this.state.timeOutKey);\n\t\tconst sequenceLength = this.state.sequence.length;\n\t\tthis.setState({\n\t\t\tsequence: [],\n\t\t\tstepCount: 0,\n\t\t\tbuttonClickable: false,\n\t\t\tintervalKey: null,\n\t\t\tgameStarted: false,\n\t\t\tisStrict: false,\n\t\t\tgameMessage: sequenceLength >= 20 ? MESSAGE['won'] : MESSAGE['gameOver'],\n\t\t});\n\t};\n\n\t// toggle Strict mode\n\ttoggleStrict = () => {\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tisStrict: !prevState.isStrict\n\t\t\t};\n\t\t});\n\t\treturn;\n\t};\n\n\trestartSequence = () => {\n\t\tclearInterval(this.state.intervalKey);\n\t\t// 1 clear interval using this.state.intervalKey\n\t\t// 2 wait 500ms to restart game // TODO - flash indicator to indicate wrong input\n\t\tsetTimeout(() => {\n\t\t\tthis.startGame(false);\n\t\t}, 2000);\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tbuttonClickable: false,\n\t\t\t\tintervalKey: null,\n\t\t\t\tstepCount: 0,\n\t\t\t};\n\t\t});\n\n\t};\n\n\t// tweet function\n\tshareTwitter = () => {\n\t\t// connect twitter\n\t\tlet tweetURL = 'http://twitter.com/home?status=';\n\t\tlet message =\n\t\t\ttweetURL +\n\t\t\tencodeURIComponent(`My Windows Simon high score is ${this.state.highScore}! @freeCodeCamp @jianyuan94`);\n\t\twindow.open(message);\n\t\treturn false;\n\t};\n\n\thandleColorMouseDown = (color, index) => {\n\t\t// color is color of the button\n\t\t// index to play sound\n\t\tconst stepCount = this.state.stepCount;\n\t\tconst sequence = this.state.sequence;\n\t\t// .load() fixes problem of audio playing only once\n\t\tplaySoundAtIndex(index);\n\t\tif (color !== sequence[stepCount]) {\n\t\t\t// if clicked on wrong color:\n\t\t\t// if strict, game over\n\t\t\tif (this.state.isStrict) {\n\t\t\t\t// if strict mode, end game // TODO - flash message to indicate user\n\t\t\t\tthis.endGame();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// if not strict, restart sequence\n\t\t\tthis.restartSequence();\n\t\t\tthis.setState({\n\t\t\t\tgameMessage: MESSAGE['wrong']\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// check if last color in sequence. if so, restart game\n\t\tconst newStepCount = stepCount + 1;\n\t\tif (newStepCount === sequence.length) {\n\t\t\tthis.setState({\n\t\t\t\tgameMessage: MESSAGE['correct']\n\t\t\t})\n\t\t\tsetTimeout(() => {\n\t\t\t\t// set highScore\n\t\t\t\tconst previousHighScore = this.state.highScore;\n\t\t\t\tconst currentScore = this.state.stepCount + 1;\n\t\t\t\t// if at last sequence, 1 reset stepCount, 2 add a new color to sequence, and 3 call start() to restart game\n\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstepCount: 0,\n\t\t\t\t\t\tbuttonClickable: false,\n\t\t\t\t\t\thighScore: currentScore > previousHighScore ? currentScore : previousHighScore\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tthis.startGame(true);\n\t\t\t}, 2000);\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({\n\t\t\tstepCount: newStepCount,\n\t\t});\n\t\treturn;\n\t};\n\n\trender() {\n\t\tconst buttons = this.state.colors.map((buttonColor, index) => {\n\t\t\treturn (\n\t\t\t\t<Button\n\t\t\t\t\tstyle={{ backgroundColor: buttonColor }}\n\t\t\t\t\tclassName={'colorBtn ' + 'color' + index}\n\t\t\t\t\tcolor={buttonColor}\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonMouseDown={() => this.handleColorMouseDown(buttonColor, index)}\n\t\t\t\t\tclickable={this.state.buttonClickable}\n\t\t\t\t\tindex={index}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"sidebar\">\n\t\t\t\t\t<h1>Windows Square</h1>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\tHigh Score: <span className=\"highScore\">{this.state.highScore}</span>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\tCurrent Round: <span className=\"currentRound\">{this.state.sequence.length}</span>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\tStrict\n\t\t\t\t\t\t<span className=\"checkbox\" onClick={this.toggleStrict}>\n\t\t\t\t\t\t\t<span className=\"check\" style={this.state.isStrict ? { opacity: '1' } : { opacity: '0' }}>\n\t\t\t\t\t\t\t\t✔\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<div className=\"ctrlBtn\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"gameBtn\"\n\t\t\t\t\t\t\tonClick={this.startGame}\n\t\t\t\t\t\t\tdisabled={this.state.gameStarted}\n\t\t\t\t\t\t\tstyle={this.state.gameStarted ? { opacity: '0.3' } : null}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tStart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"gameBtn\" onClick={this.endGame} disabled={!this.state.gameStarted} style={this.state.gameStarted ? null : { opacity: '0.3' }}>\n\t\t\t\t\t\t\tEnd\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"message\">{this.state.gameMessage}</div>\n\t\t\t\t\t<div className=\"twitter\">\n\t\t\t\t\t\tTweet your high score!<img src={twitterLogo} alt=\"tweet high score\" onClick={this.shareTwitter} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t{buttons}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Game;\n\n// ================== helpers ==================\n// generates a random color inside COLORARR\nfunction generateNextColor(colors) {\n\treturn colors[Math.floor(Math.random(colors.length) * 4)];\n}\n\n// play audio\nfunction playSoundAtIndex(index) {\n\tSOUNDS[index].play();\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/twitter.2c64644f.png\";"],"sourceRoot":""}